///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SQLDMTestAutomation.SQLDMRecordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The VerifyQueryStoreOption recording.
    /// </summary>
    [TestModule("18dbc3c6-bc36-4c59-92c1-72ac8f1bf9aa", ModuleType.Recording, 1)]
    public partial class VerifyQueryStoreOption : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SQLDMTestAutomation.SQLDMTestAutomationRepository repository.
        /// </summary>
        public static SQLDMTestAutomation.SQLDMTestAutomationRepository repo = SQLDMTestAutomation.SQLDMTestAutomationRepository.Instance;

        static VerifyQueryStoreOption instance = new VerifyQueryStoreOption();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public VerifyQueryStoreOption()
        {
            Checked = "";
            NewVariable = "true";
            NewVariable1 = "false";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static VerifyQueryStoreOption Instance
        {
            get { return instance; }
        }

#region Variables

        string _Checked;

        /// <summary>
        /// Gets or sets the value of variable Checked.
        /// </summary>
        [TestVariable("0165142b-7776-41c9-a262-1afb50ffa75d")]
        public string Checked
        {
            get { return _Checked; }
            set { _Checked = value; }
        }

        string _NewVariable;

        /// <summary>
        /// Gets or sets the value of variable NewVariable.
        /// </summary>
        [TestVariable("4a8842de-a9a8-4208-98bb-91940b0c1662")]
        public string NewVariable
        {
            get { return _NewVariable; }
            set { _NewVariable = value; }
        }

        string _NewVariable1;

        /// <summary>
        /// Gets or sets the value of variable NewVariable1.
        /// </summary>
        [TestVariable("77324afb-eeb6-40a8-99bd-791c857875ea")]
        public string NewVariable1
        {
            get { return _NewVariable1; }
            set { _NewVariable1 = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 5s to exist. Associated repository item: 'SQLDM.MonitoredSqlServerInstancePropertiesDial.WaitMonitoring'", repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.WaitMonitoringInfo, new ActionTimeout(5000), new RecordItemIndex(0));
            repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.WaitMonitoringInfo.WaitForExists(5000);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Move item 'SQLDM.MonitoredSqlServerInstancePropertiesDial.WaitMonitoring' at Center.", repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.WaitMonitoringInfo, new RecordItemIndex(1));
            repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.WaitMonitoring.MoveTo();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SQLDM.MonitoredSqlServerInstancePropertiesDial.WaitMonitoring' at Center.", repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.WaitMonitoringInfo, new RecordItemIndex(2));
            repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.WaitMonitoring.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Move item 'SQLDM.MonitoredSqlServerInstancePropertiesDial.UseExtendedEvents' at Center.", repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UseExtendedEventsInfo, new RecordItemIndex(3));
            repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UseExtendedEvents.MoveTo();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Checked='true') on item 'SQLDM.MonitoredSqlServerInstancePropertiesDial.UseExtendedEvents'.", repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UseExtendedEventsInfo, new RecordItemIndex(4));
            Validate.AttributeEqual(repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UseExtendedEventsInfo, "Checked", "true");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Move item 'SQLDM.MonitoredSqlServerInstancePropertiesDial.UseQueryStore' at Center.", repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UseQueryStoreInfo, new RecordItemIndex(5));
            repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UseQueryStore.MoveTo();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Checked='false') on item 'SQLDM.MonitoredSqlServerInstancePropertiesDial.UseQueryStore'.", repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UseQueryStoreInfo, new RecordItemIndex(6));
            Validate.AttributeEqual(repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UseQueryStoreInfo, "Checked", "false");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Move item 'SQLDM.MonitoredSqlServerInstancePropertiesDial.Cancle' at Center.", repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.CancleInfo, new RecordItemIndex(7));
            repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.Cancle.MoveTo();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(8));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SQLDM.MonitoredSqlServerInstancePropertiesDial.Cancle' at Center.", repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.CancleInfo, new RecordItemIndex(9));
            repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.Cancle.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Move item 'SQLDM.IderaSQLDiagnosticManagerSQLdmRepo.CloseMainWindow' at Center.", repo.SQLDM.IderaSQLDiagnosticManagerSQLdmRepo.CloseMainWindowInfo, new RecordItemIndex(10));
            repo.SQLDM.IderaSQLDiagnosticManagerSQLdmRepo.CloseMainWindow.MoveTo();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SQLDM.IderaSQLDiagnosticManagerSQLdmRepo.CloseMainWindow' at Center.", repo.SQLDM.IderaSQLDiagnosticManagerSQLdmRepo.CloseMainWindowInfo, new RecordItemIndex(11));
            repo.SQLDM.IderaSQLDiagnosticManagerSQLdmRepo.CloseMainWindow.Click();
            Delay.Milliseconds(200);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
