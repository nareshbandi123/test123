///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace SQLDMTestAutomation.SQLDMRecordings
{
    public partial class ListOfServers
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void GetAllServers(RepoItemInfo treeitemInfo, string argument1)
        {
            bool isFound;
        	Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'treeitemInfo' at Center.", treeitemInfo);
            //treeitemInfo.FindAdapter<TreeItem>().Click();
            
            isFound = GetItem(repo.SQLDM.IderaSQLDiagnosticManagerSQLdmRepo.AllServers, @"JS-XW7S8\SQL2008");
            //Report.Log(ReportLevel.Info, "", "Server Found ? = ", isFound);
            //if(isFound) string ss = "found"
            string report = Convert.ToString(isFound) ;
            Report.Log(ReportLevel.Info, "User",report);
        }
        
        public static bool GetItem(Ranorex.TreeItem treeitem, string givenServer)
        {
        	TreeItem item = null; bool isFound = false;
        	try 
        	{
	        	foreach (var itemtree in treeitem.Items)
	        	{
	        		if(itemtree.Expanded)
	        		{
	        			itemtree.Collapse();
	        		}
	        		if(itemtree.Text.Trim() == givenServer)
	    			{ 
						/*if(isExpand)
	        			{
	        				itemtree.EnsureVisible();
		        			itemtree.Expand();
	        			}
						item = itemtree;
						System.Threading.Thread.Sleep(500);
	    				break;*/
						isFound = true;
	    			}
	        	}
        	} 
        	catch (Exception e)
        	{
        		throw e;
        	}
        	return isFound;
        } 

    }
}
