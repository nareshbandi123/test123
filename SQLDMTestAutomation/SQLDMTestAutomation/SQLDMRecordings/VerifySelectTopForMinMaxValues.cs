///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace SQLDMTestAutomation.SQLDMRecordings
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The VerifySelectTopForMinMaxValues recording.
    /// </summary>
    [TestModule("327db533-7c43-4209-bb45-9cb499093d5a", ModuleType.Recording, 1)]
    public partial class VerifySelectTopForMinMaxValues : ITestModule
    {
        /// <summary>
        /// Holds an instance of the SQLDMTestAutomation.SQLDMTestAutomationRepository repository.
        /// </summary>
        public static SQLDMTestAutomation.SQLDMTestAutomationRepository repo = SQLDMTestAutomation.SQLDMTestAutomationRepository.Instance;

        static VerifySelectTopForMinMaxValues instance = new VerifySelectTopForMinMaxValues();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public VerifySelectTopForMinMaxValues()
        {
            NegativeDataMinValue = "0";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static VerifySelectTopForMinMaxValues Instance
        {
            get { return instance; }
        }

#region Variables

        string _NegativeDataMinValue;

        /// <summary>
        /// Gets or sets the value of variable NegativeDataMinValue.
        /// </summary>
        [TestVariable("0de7b6ba-c2fa-444b-9bc7-a7bd72345e6b")]
        public string NegativeDataMinValue
        {
            get { return _NegativeDataMinValue; }
            set { _NegativeDataMinValue = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.2")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Invoke action", "Invoking EnsureVisible() on item 'SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEdit'.", repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEditInfo, new RecordItemIndex(0));
            repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEdit.EnsureVisible();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Enabled='True') on item 'SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEdit'.", repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEditInfo, new RecordItemIndex(1));
            Validate.AttributeEqual(repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEditInfo, "Enabled", "True");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEdit'.", repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEditInfo, new RecordItemIndex(2));
            Keyboard.PrepareFocus(repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEdit);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '0' with focus on 'SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEdit'.", repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEditInfo, new RecordItemIndex(3));
            repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEdit.PressKeys("0");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking Focus() on item 'SQLDM.MonitoredSqlServerInstancePropertiesDial.OkButton'.", repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.OkButtonInfo, new RecordItemIndex(4));
            repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.OkButton.Focus();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{ENTER}' with focus on 'SQLDM.MonitoredSqlServerInstancePropertiesDial.OkButton'.", repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.OkButtonInfo, new RecordItemIndex(5));
            repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.OkButton.PressKeys("{ENTER}");
            Delay.Milliseconds(0);
            
            //Report.Log(ReportLevel.Info, "Delay", "Waiting for 4s.", new RecordItemIndex(6));
            //Delay.Duration(4000, false);
            
            //Report.Log(ReportLevel.Info, "Wait", "Waiting 40s to exist. Associated repository item: 'SQLDM.IderaSQLDiagnosticManagerSQLdmRepo.ConfigureQueryMonitor'", repo.SQLDM.IderaSQLDiagnosticManagerSQLdmRepo.ConfigureQueryMonitorInfo, new ActionTimeout(40000), new RecordItemIndex(7));
            //repo.SQLDM.IderaSQLDiagnosticManagerSQLdmRepo.ConfigureQueryMonitorInfo.WaitForExists(40000);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 40s for the attribute 'Visible' to equal the specified value 'True'. Associated repository item: 'SQLDM.IderaSQLDiagnosticManagerSQLdmRepo.ConfigureQueryMonitor'", repo.SQLDM.IderaSQLDiagnosticManagerSQLdmRepo.ConfigureQueryMonitorInfo, new RecordItemIndex(8));
            repo.SQLDM.IderaSQLDiagnosticManagerSQLdmRepo.ConfigureQueryMonitorInfo.WaitForAttributeEqual(40000, "Visible", "True");
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{ENTER}' with focus on 'SQLDM.IderaSQLDiagnosticManagerSQLdmRepo.ConfigureQueryMonitor'.", repo.SQLDM.IderaSQLDiagnosticManagerSQLdmRepo.ConfigureQueryMonitorInfo, new RecordItemIndex(9));
            repo.SQLDM.IderaSQLDiagnosticManagerSQLdmRepo.ConfigureQueryMonitor.PressKeys("{ENTER}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking EnsureVisible() on item 'SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEdit'.", repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEditInfo, new RecordItemIndex(10));
            repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEdit.EnsureVisible();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='1') on item 'SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEdit'.", repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEditInfo, new RecordItemIndex(11));
            Validate.AttributeEqual(repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEditInfo, "Text", "1");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEdit'.", repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEditInfo, new RecordItemIndex(12));
            Keyboard.PrepareFocus(repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEdit);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking Paste('1002') on item 'SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEdit'.", repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEditInfo, new RecordItemIndex(13));
            repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEdit.Element.InvokeActionWithText("Paste", "1002");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking Focus() on item 'SQLDM.MonitoredSqlServerInstancePropertiesDial.OkButton'.", repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.OkButtonInfo, new RecordItemIndex(14));
            repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.OkButton.Focus();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{ENTER}' with focus on 'SQLDM.MonitoredSqlServerInstancePropertiesDial.OkButton'.", repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.OkButtonInfo, new RecordItemIndex(15));
            repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.OkButton.PressKeys("{ENTER}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(16));
            Delay.Duration(2000, false);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 50s to exist. Associated repository item: 'SQLDM.IderaSQLDiagnosticManagerSQLdmRepo.ConfigureQueryMonitor'", repo.SQLDM.IderaSQLDiagnosticManagerSQLdmRepo.ConfigureQueryMonitorInfo, new ActionTimeout(50000), new RecordItemIndex(17));
            repo.SQLDM.IderaSQLDiagnosticManagerSQLdmRepo.ConfigureQueryMonitorInfo.WaitForExists(50000);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{ENTER}' with focus on 'SQLDM.IderaSQLDiagnosticManagerSQLdmRepo.ConfigureQueryMonitor'.", repo.SQLDM.IderaSQLDiagnosticManagerSQLdmRepo.ConfigureQueryMonitorInfo, new RecordItemIndex(18));
            repo.SQLDM.IderaSQLDiagnosticManagerSQLdmRepo.ConfigureQueryMonitor.PressKeys("{ENTER}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Invoke action", "Invoking EnsureVisible() on item 'SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEdit'.", repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEditInfo, new RecordItemIndex(19));
            repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEdit.EnsureVisible();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (Text='1000') on item 'SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEdit'.", repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEditInfo, new RecordItemIndex(20));
            Validate.AttributeEqual(repo.SQLDM.MonitoredSqlServerInstancePropertiesDial.UpDownEditInfo, "Text", "1000");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
